---
import Markdown from "../../../components/Markdown";
import { Dcon, db } from "../../../utils/db";
import TopBar from "../../../components/TopBar";
import { eq } from "drizzle-orm";
import { content } from "../../../utils/schema";
import Bloglayout from "../../../layouts/Bloglayout.astro";
import { redis } from "../../../utils/seoDB";
interface Paths {
  id: any;
  title: string;
}
interface Content {
  id: number;
  content: string;
  course_id: number;
  created_at: string;
  title: string;
}

export async function getStaticPaths() {
  const { rows: paths } = await db.execute(`select id, title from course`);
  const allowed_paths = paths as unknown as Paths[];
  return allowed_paths.map((item) => {
    return {
      params: {
        title: item.title.replace(/\s/g, ""),
        id: item.id,
      },
    };
  });
}
const { id, title } = Astro.params;
const seo = await redis.hgetall(`${title?.replace(/(\D)(\d)/, "$1 $2")}`);
console.log(seo);

// const { rows: paths } =
//   await db.execute(`SELECT * FROM content WHERE course_id = ${id} LIMIT 1;
// `);
// const content = paths as unknown as Content[];
// console.log(content[0]);
const contents = await Dcon.query.content.findFirst({
  where: (content, { eq }) => eq(content.course_id, id),
});
function shortenString(str: string) {
  const words = str.split(" ");

  if (words.length <= 20) {
    return str;
  }

  const shortenedWords = words.slice(0, 20);
  const shortenedString = shortenedWords.join(" ");

  return shortenedString;
}
// title={title?.replace(/(\D)(\d)/, "$1 $2") ?? "Course X"}
---

<Bloglayout
  description={shortenString(seo?.description as string)}
  image_url={seo?.image_url as string}
  title={seo?.title as string}
>
  <main class="border-black container mx-auto h-full">
    <h1 class="text-3xl font-sans text-black text-center m-3">
      {contents?.title}
    </h1>
    <div class="text-black prose-pre:bg-slate-200 - w-full">
      <Markdown content={contents?.content as string} />
    </div>
  </main>
</Bloglayout>
